<?php
/* vim: set tabstop=4 shiftwidth=4 softtabstop=4: */
/**
 * Get handler for ${submodulename}.
 *
 * This script is part of the corelib project. The corelib project is
 * free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license
 * from the author is found in LICENSE.txt distributed with these scripts.
 *
 * This script is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * This copyright notice MUST APPEAR in all copies of the script!
 *
 * @author Steffen Soerensen <ss@corelib.org>
 * @copyright Copyright (c) 2005-2008 Steffen Soerensen
 * @license http://www.gnu.org/copyleft/gpl.html
 * @package AutoGenerated
 * @subpackage User
 * @link http://www.corelib.org/
 * @version 1.0.0 ($Id$)
 * @filesource
 */

/**
 * @ignore
 */
class WebPage extends ZhostingPagePost {
	/* Interface post methods */
	public function edit($id){
		$input = InputHandler::getInstance();
		$user = new User($id);
		if($this->_validateUserInput($user, 'username', 'password', 'email', 'activated', 'activation-string', 'deleted', 'last-timestamp')){
			$user->commit();
			$this->post->setLocation('users/');
		} else {
			$this->post->setLocation('users/'.$id.'/edit/?error', $input->serializePost());
		}
	}

	public function create(){
		$input = InputHandler::getInstance();
		$user = new User();
		if($this->_validateUserInput($user, 'username', 'password', 'email', 'activated', 'activation-string', 'deleted', 'last-timestamp')){
			$user->commit();
			$this->post->setLocation('users/');
		} else {
			$this->post->setLocation('users/create/?error', $input->serializePost());
		}
	}

	/* Interface post methods end */


	private function _validateUserInput(User $user /*, [$variables...] */){
		$input = InputHandler::getInstance();
		$checkvalid = func_get_args();
		array_shift($checkvalid);

		/* Interface post validation */
		$input->validatePost('username', new InputValidatorNotEmpty());
		$input->validatePost('password', new InputValidatorNotEmpty());
		$input->validatePost('email', new InputValidatorNotEmpty());
		$input->validatePost('activated', new InputValidatorEnum('true','false'));
		$input->validatePost('activation-string', new InputValidatorNotEmpty());
		$input->validatePost('deleted', new InputValidatorEnum('true','false'));
		$input->validatePost('last-timestamp', new InputValidatorRegex('//') /* Timestamp validation */);
		/* Interface post validation end */

		if($input->isValidPostVariables($checkvalid)){
			/* Interface actions */
			if($input->isValidPost('username')){
				$user->setUsername($input->getPost('username'));
			}
			if($input->isValidPost('password')){
				$user->setPassword($input->getPost('password'));
			}
			if($input->isValidPost('email')){
				$user->setEmail($input->getPost('email'));
			}
			if($input->isValidPost('activated')){
				$user->setActivated($input->getPost('activated'));
			}
			if($input->isValidPost('activation-string')){
				$user->setActivationString($input->getPost('activation-string'));
			}
			if($input->isValidPost('deleted')){
				$user->setDeleted($input->getPost('deleted'));
			}
			if($input->isValidPost('last-timestamp')){
				$user->setLastTimestamp($input->getPost('last-timestamp'));
			}
			/* Interface actions end */
			return true;
		} else {
			return false;
		}
	}
}
?>