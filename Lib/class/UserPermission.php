<?php
/* vim: set tabstop=4 shiftwidth=4 softtabstop=4: */
/**
 * This script is part of the corelib project. The corelib project is
 * free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license
 * from the author is found in LICENSE.txt distributed with these scripts.
 *
 * This script is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * This copyright notice MUST APPEAR in all copies of the script!
 *
 * @author Steffen Soerensen <ss@corelib.org>
 * @copyright Copyright (c) 2005-2008 Steffen Soerensen
 * @license http://www.gnu.org/copyleft/gpl.html
 *
 * @category corelib
 * @package Users
 * @package Authorization
 *
 * @link http://www.corelib.org/
 * @version 1.1.0 ($Id$)
 */

//*****************************************************************//
//************************* Event Classes *************************//
//*****************************************************************//
/**
 * UserPermission modified base event.
 *
 * @package AutoGenerated
 * @subpackage user_permission
 */
abstract class UserPermissionModify implements Event {
	/**
	 * @var UserPermission
	 */
	protected $model;

	/**
	 * Create event and set modified object instance.
	 *
	 * @param UserPermission $model
	 */
	function __construct(UserPermission $model){
		$this->model = $model;
	}

	/**
	 * Get modified object instance.
	 *
	 * @return UserPermission
	 */
	public function getModel(){
		return $this->model;
	}
}

/**
 * Before commit event.
 *
 * This event i triggered each time {@link UserPermission::commit()} is called
 * but before any changes are made to the database
 *
 * @package AutoGenerated
 * @subpackage user_permission
 */
class UserPermissionModifyBeforeCommit extends UserPermissionModify { }

/**
 * Before delete event.
 *
 * This event i triggered each time {@link UserPermission::delete()} is called
 * but before any changes are made to the database
 *
 * @package AutoGenerated
 * @subpackage user_permission
 */
class UserPermissionModifyBeforeDelete extends UserPermissionModify { }

/**
 * After commit event.
 *
 * This event i triggered each time {@link UserPermission::commit()} is called
 * but after changes have been made to the database
 *
 * @package AutoGenerated
 * @subpackage user_permission
 */
class UserPermissionModifyAfterCommit extends UserPermissionModify implements CacheUpdateEvent { }

/**
 * After delete event.
 *
 * This event i triggered each time {@link UserPermission::delete()} is called
 * but after changes have been made to the database
 *
 * @package AutoGenerated
 * @subpackage user_permission
 */
class UserPermissionModifyAfterDelete extends UserPermissionModify implements CacheUpdateEvent { }


//*****************************************************************//
//************************* DAO Interface *************************//
//*****************************************************************//
/**
 * DAO interface for UserPermission.
 *
 * @package AutoGenerated
 * @subpackage user_permission
 */
interface DAO_UserPermission {
	/**
	 * Save object data in database.
	 *
	 * @param DatabaseDataHandler $data
 	 * @return integer id on success, else return false
 	 */
	public function create(DatabaseDataHandler $data);
	/**
	 * Update object data in database.
	 *
	 * @param integer database reference ID
	 * @param DatabaseDataHandler $data
	 * @return boolean true on success, else return false
	 */
	public function update($id, DatabaseDataHandler $data);
	/**
	 * Get object data from database
	 *
	 * @param integer database reference ID
	 * @return array on success, else return false
	 */
	public function read($id);
	/**
	 * Remove data from database.
	 *
	 * @param integer database reference ID
	 * @return boolean true on success, else return false
	 */
	public function delete($id);
}

//*****************************************************************//
//******************** Abstract View classes **********************//
//*****************************************************************//
/**
 * Simple class for handling database cached xml views.
 *
 * @package AutoGenerated
 * @subpackage user_permission
 */
abstract class UserPermissionView extends View { }


//*****************************************************************//
//************************** Model class **************************//
//*****************************************************************//
/**
 * UserPermission model.
 *
 * @package AutoGenerated
 * @subpackage user_permission
 */
class UserPermission implements Output,CacheableOutput {
	/* Properties */
	private $id = null;
	private $ident = null;
	private $title = null;
	private $description = null;
	/* Properties end */

	/* Converter properties */
	/* Converter properties end */

	/* Field constants */
	const FIELD_ID = 'pk_user_permissions';
	const FIELD_IDENT = 'ident';
	const FIELD_TITLE = 'title';
	const FIELD_DESCRIPTION = 'description';
	/* Field constants end */

	/* Enum constants */
	/* Enum constants end */

	/**
	 * @var DAO_UserPermission
	 */
	private $dao = null;

	/**
	 * @var DatabaseDataHandler
	 */
	private $datahandler = null;

	/**
	 * @var CacheManagerOutput
	 */
	private $cache = null;

	/**
	 * DAO Class name reference.
	 */
	const DAO = 'UserPermission';


	//*****************************************************************//
	//*************************** Constructor *************************//
	//*****************************************************************//
	/**
	 * Create model UserPermission instance.
	 *
	 * @uses UserPermission::$id
	 * @uses UserPermission::_setFromArray()
	 * @uses UserPermission::$datahandler
	 * @param integer $id object id
	 * @param array $array object data from another data source
	 * @return void
	 */
	public function __construct($id = null, $array = array()){
		$this->id = $id;
		if(sizeof($array) > 0){
			$this->_setFromArray($array);
		}
		$this->datahandler = new DatabaseDataHandler();
	}


	//*****************************************************************//
	//*************************** Get methods *************************//
	//*****************************************************************//
	/* Get methods */
	/**
	 * Get id.
	 *
	 * @return integer id
	 */
	public function getID(){
		return $this->id;
	}

	/**
	 * Get ident.
	 *
	 * @return string ident
	 */
	public function getIdent(){
		return $this->ident;
	}

	/**
	 * Get title.
	 *
	 * @return string title
	 */
	public function getTitle(){
		return $this->title;
	}

	/**
	 * Get description.
	 *
	 * @return string description
	 */
	public function getDescription(){
		return $this->description;
	}

	/* Get methods end */


	//*****************************************************************//
	//*************************** Set methods *************************//
	//*****************************************************************//
	/* Set methods */
	/**
	 * Set title.
	 *
	 * @param string $title
	 * @return boolean true on success, else return false
	 */
	public function setTitle($title){
		$this->title = $title;
		$this->datahandler->set(self::FIELD_TITLE, $title);
		return true;
	}

	/**
	 * Set description.
	 *
	 * @param string $description
	 * @return boolean true on success, else return false
	 */
	public function setDescription($description){
		$this->description = $description;
		$this->datahandler->set(self::FIELD_DESCRIPTION, $description);
		return true;
	}

	/**
	 * Set ident.
	 *
	 * @param string $ident
	 * @return boolean true on success, else return false
	 */
	public function setIdent($ident){
		if($this->isIdentAvailable($ident)){
			$this->datahandler->set(self::FIELD_IDENT, $ident);
			$this->ident = $ident;
			return true;
		} else {
			return false;
		}
	}

	/* Set methods end */


	//*****************************************************************//
	//********************* Converter set methods *********************//
	//*****************************************************************//
	/* Converter methods */
	/* Converter methods end */


	//*****************************************************************//
	//************************ Utility methods ************************//
	//*****************************************************************//
	/* Utility methods */
	/**
	 * Get data by ident.
	 *
	 * @param string ident
	 * @return boolean true on success, else return false
	 */
	public function getByIdent($ident){
		$this->_getDAO(false);
		$this->_setFromArray($this->dao->getByIdent($ident));
		if(is_null($this->id)){
			return false;
		} else {
			return true;
		}
	}

	/**
	 * Is ident combination available.
	 *
	 * @param string $ident
	 * @return boolean true on success, else return false
	 */
	public function isIdentAvailable($ident){
		$this->_getDAO(false);
		return $this->dao->isIdentAvailable($this->id, $ident);
	}

	/* Utility methods end */
	/**
	 * Set cache manager.
	 *
	 * @uses UserPermission::$cache
	 * @param CacheManagerOutput $cache
	 * @return void
	 * @internal
	 */
	public function setCacheManagerOutput(CacheManagerOutput $cache){
		/* Cache references */
		/* Cache references end */
		$this->cache = $cache;
	}


	//*****************************************************************//
	//********************** Data change methods **********************//
	//*****************************************************************//
	/**
	 * Delete data from database.
	 *
	 * @uses UserPermission::$dao
	 * @uses UserPermission::_getDAO()
	 * @uses DAO_UserPermission::delete);
	 * @return boolean return true on success, else return false
	 */
	public function delete(){
		$this->_getDAO(false);
		return $this->dao->delete($this->id);
	}

	/**
	 * Read data from database.
	 *
	 * @uses UserPermission::$id
	 * @uses UserPermission::$dao
	 * @uses UserPermission::_getDAO()
	 * @uses UserPermission::_setFromArrray()
	 * @return boolean return true on success, else return false
	 */
	public function read(){
		$this->_getDAO(false);
		if($array = $this->dao->read($this->id)){
			$this->_setFromArray($array);
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Commit changes to database.
	 *
	 * @uses UserPermission::$id
	 * @uses UserPermission::_getDAO()
	 * @uses UserPermission::_create()
	 * @uses UserPermission::_update()
	 * @uses EventHandler::trigger()
	 * @uses UserPermissionModifyBeforeCommit
	 * @uses UserPermissionModifyAfterCommit
	 * @return boolean return true on success, else return false
	 */
	public function commit(){
		$event = EventHandler::getInstance();
		$this->_getDAO();
		$event->trigger(new UserPermissionModifyBeforeCommit($this));
		if(is_null($this->id)){
			$r = $this->_create();
		} else {
			$r = $this->_update();
		}
		if($r !== false){
			$event->trigger(new UserPermissionModifyAfterCommit($this));
		}
		return $r;
	}


	//*****************************************************************//
	//************************* Output methods ************************//
	//*****************************************************************//
	/**
	 * @see Output::getXML()
	 * @param DOMDocument $xml
	 * @return DOMElement XML output
	 */
	public function getXML(DOMDocument $xml){
		$user_permission = $xml->createElement('user-permission');
		/* Get XML method */
		if(!is_null($this->id)){
			$user_permission->setAttribute('id', $this->getID());
		}
		if(!is_null($this->ident)){
			$user_permission->setAttribute('ident', $this->getIdent());
		}
		if(!is_null($this->title)){
			$user_permission->setAttribute('title', $this->getTitle());
		}
		if(!is_null($this->description)){
			$user_permission->setAttribute('description', $this->getDescription());
		}
		/* Get XML method end */
		return $user_permission;
	}

	//*****************************************************************//
	//************************ Private methods ************************//
	//*****************************************************************//
	/**
	 * Get Current DAO object instance.
	 *
	 * @uses UserPermission::$dao
	 * @uses UserPermission::read()
	 * @uses UserPermission::DAO
	 * @uses Database::getDAO()
	 * @param boolean $read if true, then read data from database
	 * @return boolean true
	 * @internal
	 */
	private function _getDAO($read=true){
		if(is_null($this->dao)){
			$this->dao = Database::getDAO(self::DAO);
			if($read){
				$this->read();
			}
		}
		return true;
	}
	/**
	 * Create object in database.
	 *
	 * @uses UserPermission::$id
	 * @uses UserPermission::$dao
	 * @uses UserPermission::$datahandler
	 * @uses UserPermission::read()
	 * @uses DAO_UserPermission::create()
	 * @return boolean true on success, else return false
	 * @internal
	 */
	private function _create(){
		if($this->id = $this->dao->create($this->datahandler)){
			$this->read();
			return true;
		} else {
			return false;
		}
	}
	/**
	 * Update object in database.
	 *
	 * @uses UserPermission::$dao
	 * @uses DAO_UserPermission::update();
	 * @return boolean true on success, else return false
	 * @internal
	 */
	private function _update(){
		if($this->dao->update($this->id, $this->datahandler)){
			$this->read();
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Populate model using an array as data source.
	 *
	 * @param array $data Data
	 * @internal
	 */
	protected function _setFromArray($array){
		/* setFromArray method content */
		if(isset($array[self::FIELD_ID])){
			$this->id = (integer) $array[self::FIELD_ID];
		}
		if(isset($array[self::FIELD_IDENT])){
			$this->ident = (string) $array[self::FIELD_IDENT];
		}
		if(isset($array[self::FIELD_TITLE])){
			$this->title = (string) $array[self::FIELD_TITLE];
		}
		if(isset($array[self::FIELD_DESCRIPTION])){
			$this->description = (string) $array[self::FIELD_DESCRIPTION];
		}
		/* setFromArray method content end */
	}

}
?>